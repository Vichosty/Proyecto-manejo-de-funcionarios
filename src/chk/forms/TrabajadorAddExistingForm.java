/*
 * The MIT License
 *
 * Copyright 2022 chkp.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package chk.forms;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author chkp
 */
public final class TrabajadorAddExistingForm extends javax.swing.JDialog {

    /**
     * Creates new form TrabajadorAddExistingForm
     */
    public TrabajadorAddExistingForm(java.awt.Frame parent, boolean modal, gobierno.Gobierno gobierno, gobierno.Reparticion reparticion) {
        super(parent, modal);
        initComponents();
        this.gobierno = gobierno;
        setReparticion(reparticion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gobierno = new gobierno.Gobierno();
        reparticion = new gobierno.Reparticion();
        trabajador = new gobierno.Trabajador();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        selectPanel = new javax.swing.JPanel();
        selectScrollPane = new javax.swing.JScrollPane();
        selectTree = new javax.swing.JTree();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Elegir Trabajador Existente");
        setModal(true);
        setType(java.awt.Window.Type.POPUP);

        titlePanel.setLayout(new java.awt.GridLayout(1, 0));

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+8));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Elegir Trabajador Existente");
        titlePanel.add(titleLabel);

        selectPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        selectTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        selectTree.setCellRenderer(new chk.plugins.CustomTreeCellRenderer());
        selectTree.setRootVisible(false);
        selectTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        selectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectTreeMouseClicked(evt);
            }
        });
        selectScrollPane.setViewportView(selectTree);

        javax.swing.GroupLayout selectPanelLayout = new javax.swing.GroupLayout(selectPanel);
        selectPanel.setLayout(selectPanelLayout);
        selectPanelLayout.setHorizontalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectScrollPane)
                .addContainerGap())
        );
        selectPanelLayout.setVerticalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        addButton.setText("Agregar");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
            .addComponent(selectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectTreeMouseClicked
        int row = selectTree.getRowForLocation(evt.getX(), evt.getY());
        if(row == -1) {
            selectTree.clearSelection();
            this.trabajador = null;
            addButton.setEnabled(false);
        } else {
            DefaultMutableTreeNode selectedNode =
                (DefaultMutableTreeNode)selectTree.getLastSelectedPathComponent();
            Object userObject = selectedNode.getUserObject();
            if (userObject instanceof gobierno.Trabajador) {
                gobierno.Trabajador t = (gobierno.Trabajador)userObject;
                this.trabajador = t;
                addButton.setEnabled(true);
                // Check if double clicked
                if (evt.getClickCount() == 2) {
                    dispose();
                }
            } else {
                addButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_selectTreeMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    public void reloadTree() {
        DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode();
        // populate the nodes
        DefaultMutableTreeNode reparticionNode = null;
        for(gobierno.Reparticion r : this.gobierno.getReparticiones()){
            // Saltar el nodo si es de la reparticion a la que queremos agregar
            if (this.reparticion.equals(r)) { continue; }
            
            reparticionNode = new DefaultMutableTreeNode(r.getNombre());
            reparticionNode.setUserObject(r);
            treeRoot.add(reparticionNode);
            
            // Agregar los trabajadores a ese nodo
            DefaultMutableTreeNode trabajadorNode = null;
            for(gobierno.Trabajador t : gobierno.getTrabajadoresEnReparticion(r.getId())) {
                
                // Omitir los trabajadores que ya estan en ambas reparticiones
                boolean found = false;
                for(gobierno.Contrato c : gobierno.getContratosDeTrabajador(t.getId())) {
                    if (c.getIdReparticion() == this.reparticion.getId()) { found = true; break; }
                }
                if (found) { continue; }
                
                trabajadorNode = new DefaultMutableTreeNode(t.getNombreCompleto());
                trabajadorNode.setUserObject(t);
                reparticionNode.add(trabajadorNode);
            }
        }
        
        // Agregar todos los que no tienen ninguna reparticion
        reparticionNode = new DefaultMutableTreeNode("Sin Reparticion");
        treeRoot.add(reparticionNode);
        
        DefaultMutableTreeNode trabajadorNode = null;
        for(gobierno.Trabajador t : gobierno.getTrabajadoresSinReparticion()) {
            trabajadorNode = new DefaultMutableTreeNode(t.getNombreCompleto());
            trabajadorNode.setUserObject(t);
            reparticionNode.add(trabajadorNode);
        }
        
        
        DefaultTreeModel treeModel = new DefaultTreeModel(treeRoot);
        this.selectTree.setModel(treeModel);
    }
    
    public void setReparticion(gobierno.Reparticion reparticion) {
        this.reparticion = reparticion;
        reloadTree();
    }
    
    public gobierno.Trabajador getTrabajador() {
        return this.trabajador;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private gobierno.Gobierno gobierno;
    private gobierno.Reparticion reparticion;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JScrollPane selectScrollPane;
    private javax.swing.JTree selectTree;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private gobierno.Trabajador trabajador;
    // End of variables declaration//GEN-END:variables
}
