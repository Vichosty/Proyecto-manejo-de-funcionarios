/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chk.forms;

import gobierno.Contrato;
import gobierno.Contratos;
import gobierno.Reparticion;
import gobierno.Reparticiones;
import gobierno.Trabajador;
import gobierno.Trabajadores;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author chkp
 */
public final class TrabajadorChooserForm extends javax.swing.JDialog {

    /**
     * Creates new form TrabajadorAddExistingForm
     * @param parent
     * @param modal
     * @param reparticion
     */
    public TrabajadorChooserForm(java.awt.Frame parent, boolean modal, Reparticion reparticion) {
        super(parent, modal);
        
        trabajadores = Trabajadores.get();
        reparticiones = Reparticiones.get();
        contratos = Contratos.get();
        
        initComponents();
        setReparticion(reparticion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        reparticion = new gobierno.Reparticion();
        trabajador = new gobierno.Trabajador();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        selectPanel = new javax.swing.JPanel();
        selectScrollPane = new javax.swing.JScrollPane();
        selectTree = new javax.swing.JTree();
        addPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Elegir Trabajador Existente");
        setModal(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        titlePanel.setMinimumSize(new java.awt.Dimension(251, 64));
        titlePanel.setPreferredSize(new java.awt.Dimension(251, 64));
        titlePanel.setLayout(new java.awt.GridLayout(1, 0));

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+8));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Elegir Trabajador Existente");
        titlePanel.add(titleLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(titlePanel, gridBagConstraints);

        selectPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        selectTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        selectTree.setCellRenderer(new chk.plugins.CustomTreeCellRenderer());
        selectTree.setRootVisible(false);
        selectTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        selectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectTreeMouseClicked(evt);
            }
        });
        selectScrollPane.setViewportView(selectTree);

        javax.swing.GroupLayout selectPanelLayout = new javax.swing.GroupLayout(selectPanel);
        selectPanel.setLayout(selectPanelLayout);
        selectPanelLayout.setHorizontalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(selectScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );
        selectPanelLayout.setVerticalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(selectScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(selectPanel, gridBagConstraints);

        addPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 4));

        addButton.setText("Agregar");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addPanel.add(addButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(addPanel, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectTreeMouseClicked
        JTree tree = (JTree)evt.getSource();
        int row = tree.getRowForLocation(evt.getX(), evt.getY());
        
        if (row == -1) {
            tree.clearSelection();
            this.trabajador = null;
            addButton.setEnabled(false);
        } else {
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
            Object userObject = selectedNode.getUserObject();
            if (userObject instanceof Trabajador) {
                Trabajador t = (Trabajador) userObject;
                this.trabajador = t;
                addButton.setEnabled(true);
                // Check if double clicked
                if (evt.getClickCount() == 2) {
                    dispose();
                }
            } else {
                addButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_selectTreeMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    public void reloadTree() {
        DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode();
        
        // populate the nodes
        DefaultMutableTreeNode reparticionNode;
        for (int reparticionId : reparticiones.getIDs()) {
            Reparticion r = reparticiones.get(reparticionId);
            
            // Saltar el nodo si es de la reparticion a la que queremos agregar
            if (this.reparticion.equals(r)) {
                continue;
            }

            reparticionNode = new DefaultMutableTreeNode(r.getNombre());
            reparticionNode.setUserObject(r);
            treeRoot.add(reparticionNode);

            /*
                El siguiente codigo es practicamente igual al anterior, pero
                esta version usa la doble-anidacion de Reparticiones->Reparticion->idTrabajadores
                para obtener al potencial trabajador.
            */
            
            // Agregar los trabajadores con contrato en esta reparticion al nodo
            DefaultMutableTreeNode trabajadorNode;
            for(int trabajadorId : r.getIdsTrabajadores()) {
                Trabajador t = trabajadores.get(trabajadorId);
                
                // Obtener una lista de los contratos de este trabajador, para ver
                // si es necesario omitirlo (ya esta en ambas, etc)
                boolean found = false;
                for (int contratoId : contratos.getIDsByIdTrabajador(trabajadorId)) {
                    Contrato c = contratos.get(contratoId);
                    if (c.getIdReparticion() == reparticion.getId()) {
                        found = true; 
                        break;
                    }
                }
                
                // Si encontramos aunque sea un contrato que incluya a la reparticion en el
                // entonces el trabajador no es candidato para la lista.
                if (found) { continue; }
                
                trabajadorNode = new DefaultMutableTreeNode(t.getNombreCompleto());
                trabajadorNode.setUserObject(t);
                reparticionNode.add(trabajadorNode);
            }
        }

        // Agregar todos los que no tienen ninguna reparticion
        reparticionNode = new DefaultMutableTreeNode("Sin Reparticion");
        treeRoot.add(reparticionNode);

        DefaultMutableTreeNode trabajadorNode;
        for (int trabajadorId : trabajadores.getIDsSinReparticion()) {
            Trabajador t = trabajadores.get(trabajadorId);
            trabajadorNode = new DefaultMutableTreeNode(t.getNombreCompleto());
            trabajadorNode.setUserObject(t);
            reparticionNode.add(trabajadorNode);
        }

        DefaultTreeModel treeModel = new DefaultTreeModel(treeRoot);
        this.selectTree.setModel(treeModel);
    }

    public void setReparticion(gobierno.Reparticion reparticion) {
        this.reparticion = reparticion;
        reloadTree();
    }

    public gobierno.Trabajador getTrabajador() {
        return this.trabajador;
    }

    
    private final Trabajadores trabajadores;
    private final Reparticiones reparticiones;
    private final Contratos contratos;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private gobierno.Reparticion reparticion;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JScrollPane selectScrollPane;
    private javax.swing.JTree selectTree;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private gobierno.Trabajador trabajador;
    // End of variables declaration//GEN-END:variables
}
